// clase 10 ejercicio 1 y 2 , cliente y servidor

//servidor 

// importa el módulo 'net' para crear un servidor TCP
const net = require('net');

// crea una nueva instancia del servidor TCP.
const server = net.createServer();

// maneja el evento 'connection' para aceptar nuevas conexiones de clientes.
server.on('connection', (socket) => {
    // muestra en consola que un nuevo cliente se ha conectado.
    console.log('Nuevo cliente conectado:', socket.remoteAddress + ":" + socket.remotePort);

    // maneja el evento 'data' para recibir mensajes de los clientes.
    socket.on('data', (data) => {
        // muestra en consola el mensaje recibido del cliente.
        console.log('Mensaje del cliente ' + socket.remoteAddress + ":" + socket.remotePort + ': ' + data.toString());
        // envía una respuesta al cliente confirmando la recepción del mensaje.
        socket.write('Mensaje recibido');
    });

    // maneja el evento 'close' para saber cuándo un cliente se desconecta.
    socket.on('close', () => {
        // muestra en consola que el cliente se ha desconectado.
        console.log('Cliente desconectado:', socket.remoteAddress + ":" + socket.remotePort);
    });

    // maneja el evento 'error' para mostrar cualquier error que ocurra.
    socket.on('error', (err) => {
        console.log('Error:', err.message);
    });
});

// el servidor escucha en el puerto 5000.
server.listen(5000, () => {
    // muestra en consola que el servidor está escuchando en el puerto 5000.
    console.log('Servidor escuchando en el puerto 5000');
});

   //cliente
   
   // importa el módulo 'net' para crear una conexión TCP y 'readline-sync' para la entrada del usuario.
const net = require('net');
const readline = require('readline-sync');

// crea una nueva conexión TCP al servidor en el puerto 5000 en 'localhost'.
const client = net.createConnection({ port: 5000, host: 'localhost' });

// maneja el evento 'connect' cuando la conexión se haya establecido.
client.on('connect', () => {
    // muestra en consola que el cliente está conectado al servidor.
    console.log('Conectado al servidor');
    // llama a la función para enviar el primer mensaje.
    sendMessage();
});

// maneja el evento 'data' para recibir mensajes del servidor.
client.on('data', (data) => {
    // muestra en consola la respuesta recibida del servidor.
    console.log('Respuesta del servidor: ' + data.toString());
    // vuelve a llamar a la función para enviar el siguiente mensaje.
    sendMessage();
});

// maneja el evento 'error' para mostrar cualquier error que ocurra.
client.on('error', (err) => {
    console.log('Error:', err.message);
});

// función para enviar mensajes al servidor.
function sendMessage() {
    // solicita al usuario ingresar un mensaje para enviar al servidor.
    const message = readline.question('Ingrese un mensaje para enviar al servidor: ');
    // si el mensaje es 'exit', cierra la conexión.
    if (message.toLowerCase() === 'exit') {
        client.end();
    } else {
        // envía el mensaje al servidor.
        client.write(message);
    }
}




