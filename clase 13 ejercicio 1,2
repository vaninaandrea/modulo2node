// clase 13 ejercicio 1

 //servidor

 // importamos los módulos necesarios
const net = require('net');
const { v4: uuidv4 } = require('uuid');

//creamos el servidor TCP
const server = net.createServer((socket) => {
    // generamos un UUID v4 único para la conexión
    const connectionId = uuidv4();

    // enviamos el UUID al cliente
    socket.write(`Tu UUID es: ${connectionId}`);

    // manejamos el evento 'end' cuando la conexión se cierra
    socket.on('end', () => {
        console.log(`Conexión con ID ${connectionId} finalizada`);
    });
});

// el servidor escucha en el puerto 8080
server.listen(8080, () => {
    co
     // cliente 

     // Importamos el módulo 'net'
const net = require('net');

// Conectamos al servidor en el puerto 8080
const client = net.createConnection(8080, () => {
    console.log('Conectado al servidor');
});

// Manejamos los datos recibidos del servidor
client.on('data', (data) => {
    console.log(data.toString());
    client.end(); // Cerramos la conexión después de recibir los datos
});




//ejercicio 2 
//servidor
// Importamos los módulos necesarios
const net = require('net');
const { v5: uuidv5 } = require('uuid');

// Definimos un espacio de nombres UUID
const NAMESPACE = uuidv5.URL; // Espacio de nombres para URLs

// Creamos el servidor TCP
const server = net.createServer((socket) => {
    // Generamos un UUID v5 basado en un nombre fijo
    const nombre = "usuarioEjemplo";
    const uuid = uuidv5(nombre, NAMESPACE);

    // Creamos un objeto JSON con el UUID
    const response = JSON.stringify({
        mensaje: "Aquí está tu UUID v5",
        uuid: uuid
    });

    // Enviamos el JSON al cliente
    socket.write(response);

    // Manejamos el evento 'end' cuando la conexión se cierra
    socket.on('end', () => {
        console.log('Conexión finalizada');
    });
});

// el servidor escucha en el puerto 8080
server.listen(8080, () => {
    console.log('Servidor TCP escuchando en el puerto 8080');
});


// importamos el módulo 'net'
const net = require('net');

// conectamos al servidor en el puerto 8080
const client = net.createConnection(8080, () => {
    console.log('Conectado al servidor');
});

// manejamos los datos recibidos del servidor
client.on('data', (data) => {
    // convertimos los datos a formato JSON
    const response = JSON.parse(data.toString());
    console.log(`Mensaje del servidor: ${response.mensaje}`);
    console.log(`UUID recibido: ${response.uuid}`);
    client.end(); // cerramos la conexión después de recibir los datos
});
