// clase 15 ejercicio 1
 // servidor 

 // paso 1: Importamos los modulos necesarios
const net = require('net') // servidor
const fs = require('fs') // archivos
const path = require('path') // rutas

// paso 2: definimos la ruta donde se guardaran los mensajes en formato json
const rutaMensajes = path.join(__dirname, 'mensajes.json')

// paso 3: verificamos si el archivo json existe y si no que se cree con un array vacio
if (!fs.existsSync(rutaMensajes)) {
    fs.writeFileSync(rutaMensajes, '[]', 'utf-8')
}

// paso 4: creamos el servidor
const server = net.createServer((socket) => {
    console.log('cliente conectado');

    // Manejamos los datos recibidos del cliente
    socket.on('data', (data) => {
        const mensaje = data.toString().trim() // toString convierte buffer a texto y trim saca espacios

        //si el mensaje recibido es "/historial", enviamos todos los mensajes almacenados
        if (mensaje === '/historial') {
            // leemos el contenido del archivo mensaje.json
            const historial = fs.readFileSync(rutaMensajes, 'utf8')
            // enviamos el historial (todos los mensaje)
            socket.write(`Historial de mensajes: \n${historial}`)
        } else {
            // si no me manda ese comando hacer lo siguiente
            // leemos el archivo json y los convertimos en un array de objetos
            const mensajes = JSON.parse(fs.readFileSync(rutaMensajes, 'utf-8') || '[]')
            // agregamos el nuevo mensaje con la fecha y hora actual
            mensajes.push({ fecha: new Date().toISOString(), mensaje })
            //guardamos el array actualizado en el archivo mensajes.json con un formato legible
            fs.writeFileSync(rutaMensajes, JSON.stringify(mensajes, null, 2), 'utf-8')
            // enviamos una confirmacion de que se guardo bien al cliente
            socket.write('Mensaje guardado correctamente')
        }
    })
    //mensaje

    [
        {
          "fecha": "2025-02-26T00:16:19.111Z",
          "mensaje": "hola servidor"
        }
      ]

      //ciente
      // paso 6: importacion en el cliente
const net = require('net')

//paso 7: creamos al cliente
const client = net.createConnection({ port: 3000 }, () => {
    console.log('conectado al servidor');
    client.write('hola servidor')
})
// evento data
client.on('data', (data) => {
    console.log('Respuesta del servidor: ', data.toString());
})

// evento end
client.on('end', () => {
    console.log('Descconectado del servidor');
})

// ejercicio 2

const fs = require('fs');
const path = require('path');
const readline = require('readline-sync');

// Ruta al archivo JSON
const rutaTareas = path.join(__dirname, 'tareas.json');

// Modelo: Representa una tarea
class Tarea {
    constructor(descripcion) {
        this.descripcion = descripcion;
        this.completada = false;
    }
}

// Controlador: Gestiona la lógica de la aplicación
class ControladorTareas {
    constructor() {
        this.tareas = this.cargarTareas();
    }

    cargarTareas() {
        try {
            const datos = fs.readFileSync(rutaTareas, 'utf-8');
            return JSON.parse(datos);
        } catch (error) {
            return [];
        }
    }

    guardarTareas() {
        fs.writeFileSync(rutaTareas, JSON.stringify(this.tareas, null, 2));
    }

    agregarTarea(descripcion) {
        const tarea = new Tarea(descripcion);
        this.tareas.push(tarea);
        this.guardarTareas();
        console.log('Tarea añadida:', descripcion);
    }

    listarTareas() {
        console.log('Tareas:');
        this.tareas.forEach((tarea, index) => {
            console.log(`${index + 1}. ${tarea.descripcion} [${tarea.completada ? 'Completada' : 'Pendiente'}]`);
        });
    }
}

// Vista: Interacción con el usuario
const controlador = new ControladorTareas();

while (true) {
    const opcion = readline.question(
        '¿Qué deseas hacer? (1. Añadir tarea, 2. Listar tareas, 3. Salir): '
    );

    if (opcion === '1') {
        const descripcion = readline.question('Descripción de la tarea: ');
        controlador.agregarTarea(descripcion);
    } else if (opcion === '2') {
        controlador.listarTareas();
    } else if (opcion === '3') {
        break;
    } else {
        console.log('Opción no válida');
    }
}
